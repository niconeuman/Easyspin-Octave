/* Lanczos approximation to the logarithm of the Gamma function
 for integer arguments.
 (taken from "Numerical Recipes", error 2e-10) */
double facln(const int N)
{
const double values[201] =
{0, 0,
0.69314718055994530942, 1.7917594692280550008, 3.1780538303479456196,
4.7874917427820459942, 6.5792512120101009951, 8.5251613610654143002, 
10.604602902745250228, 12.801827480081469611, 15.104412573075515295, 
17.502307845873885839, 19.987214495661886150, 22.552163853123422886, 
25.191221182738681500, 27.899271383840891566, 30.671860106080672804, 
33.505073450136888884, 36.395445208033053576, 39.339884187199494036, 
42.335616460753485030, 45.380138898476908026, 48.471181351835223880, 
51.606675567764373570, 54.784729398112319190, 58.003605222980519939, 
61.261701761002001985, 64.557538627006331059, 67.889743137181534983, 
71.257038967168009010, 74.658236348830164385, 78.092223553315310631, 
81.557959456115037179, 85.054467017581517414, 88.580827542197678804, 
92.136175603687092483, 95.719694542143202485, 99.330612454787426929, 
102.96819861451381270, 106.63176026064345913, 110.32063971475739543, 
114.03421178146170323, 117.77188139974507154, 121.53308151543863396, 
125.31727114935689513, 129.12393363912721488, 132.95257503561630988, 
136.80272263732636847, 140.67392364823425940, 144.56574394634488601, 
148.47776695177303207, 152.40959258449735784, 156.36083630307878519, 
160.33112821663090703, 164.32011226319518141, 168.32744544842765233, 
172.35279713916280156, 176.39584840699735172, 180.45629141754377105, 
184.53382886144949050, 188.62817342367159119, 192.73904728784490244, 
196.86618167288999399, 201.00931639928152668, 205.16819948264119854, 
209.34258675253683565, 213.53224149456326119, 217.73693411395422725, 
221.95644181913033395, 226.19054832372759333, 230.43904356577695232, 
234.70172344281826774, 238.97838956183432305, 243.26884900298271418, 
247.57291409618688394, 251.89040220972319438, 256.22113555000952546, 
260.56494097186320931, 264.92164979855280104, 269.29109765101982254, 
273.67312428569370415, 278.06757344036614291, 282.47429268763039603, 
286.89313329542699395, 291.32395009427030757, 295.76660135076062402, 
300.22094864701413175, 304.68685676566871547, 309.16419358014692194, 
313.65282994987906178, 318.15263962020932685, 322.66349912672617689, 
327.18528770377521720, 331.71788719692847314, 336.26118197919847703, 
340.81505887079901787, 345.37940706226685411, 349.95411804077023693, 
354.53908551944080885, 359.13420536957539878, 363.73937555556349014, 
368.35449607240474959, 372.97946888568902068, 377.61419787391865645, 
382.25858877306002911, 386.91254912321755248, 391.57598821732961963, 
396.24881705179152580, 400.93094827891574549, 405.62229616114488919, 
410.32277652693730542, 415.03230672824963956, 419.75080559954473410, 
424.47819341825707467, 429.21439186665157013, 433.95932399501482019, 
438.71291418612118484, 443.47508812091894096, 448.24577274538460572, 
453.02489623849613510, 457.81238798127818110, 462.60817852687492219, 
467.41219957160817874, 472.22438392698059624, 477.04466549258563310, 
481.87297922988793423, 486.70926113683941223, 491.55344822329800350, 
496.40547848721762066, 501.26529089157929278, 506.13282534203487520, 
511.00802266523602674, 515.89082458782239760, 520.78117371604415136, 
525.67901351599506273, 530.58428829443349218, 535.49694318016954419, 
540.41692410599766910, 545.34417779115487380, 550.27865172428556555, 
555.22029414689486985, 560.16905403727303813, 565.12488109487429886, 
570.08772572513420614, 575.05753902471020676, 580.03427276713078116, 
585.01787938883911760, 590.00831197561785390, 595.00552424938196897, 
600.00947055532742811, 605.02010584942368386, 610.03738568623860819, 
615.06126620708488458, 620.09170412847732004, 625.12865673089094920, 
630.17208184781019582, 635.22193785505973286, 640.27818366040804092, 
645.34077869343500772, 650.40968289565523925, 655.48485671088906617, 
660.56626107587352917, 665.65385741110591324, 670.74760761191267558, 
675.84747403973687400, 680.95341951363745461, 686.06540730199399784, 
691.18340111441075295, 696.30736509381401187, 701.43726380873708535, 
706.57306224578734711, 711.71472580229000695, 716.86222027910346000, 
722.01551187360123894, 727.17456717281576797, 732.33935314673928203, 
737.50983714177743381, 742.68598687435126295, 747.86777042464334810, 
753.05515623048410309, 758.24811308137431347, 763.44661011264013922, 
768.65061679971693457, 773.86010295255835551, 779.07503871016734113, 
784.29539453524566594, 789.52114120895886719, 794.75224982581345382, 
799.98869178864340302, 805.23043880370304540, 810.47746287586353154, 
815.72973630391016142, 820.98723167593794297, 826.24992186484282852, 
831.51778002390615665, 836.79077958246990345, 842.06889424170042068, 
847.35209797043840919, 852.64036500113294442, 857.93366982585743682, 
863.23198719240547350};

const double c[6] = {76.18009172947146,-86.50532032941677,
  24.01409824083091,-1.231739572450155,0.1208650973866179e-2,
  -0.5395239384953e-5};

double x, y, tmp, Series, lnGamma;
int j;

if (N<=200)
  return values[N];

x = N + 1;
tmp = x + 5.5;
tmp -= (x+0.5)*log(tmp);

y = N + 1;
Series = 1 + 1.90015e-10;
for (j=0;j<6;j++) Series +=c[j]/++y;

lnGamma = -tmp + log(2.5066282746310005024*Series/x);

return lnGamma;
}

/*=========================================================================*/
/* mex implementation of wigner 3j symbols */
/* (used by chili_lm0, chili_lm1, and chili_lm2) */
/*=========================================================================*/
double jjj(int j1, int j2, int j3, int m1, int m2, int m3)
{

double w3j;


int k;
int parity(int);
const int prty = parity(j1+j2+j3);
int phase = 1;

/* Guarantee j1>=j2>=j3 */
if (j1<j3) {
  k = j1; j1 = j3; j3 = k;
  k = m1; m1 = m3; m3 = k;
  phase *= prty;
}
if (j1<j2) {
  k = j1; j1 = j2; j2 = k;
  k = m1; m1 = m2; m2 = k;
  phase *= prty;
}
if (j2<j3) {
  k = j2; j2 = j3; j3 = k;
  k = m2; m2 = m3; m3 = k;
  phase *= prty;
}

/* Guarantee m3>=0 */
if (m3<0) {
  m1 = -m1; m2 = -m2; m3 = -m3;
  phase *= prty;
}


/* Check triangle condition */
if (j1-j2>j3) {
  w3j = 0;
  return w3j;
}

if (m3<0)
  mexPrintf("  (%d %d %d | %d %d %d)\n",j1,j2,j3,m1,m2,m3);


if (j3<=2) {
  /* j3<=2 (covers almost all cases) */
  /* Explicit formulae from Edmonds' book (Table 2, p.125-127) */
  
  double tmp;
    
  int jd = j1 - j2;
  int J = j2;
  int M = m1;

  double x = 2*J - 1 + jd;
  double y = J - M;
  double z = J + M;
  
  /* Prefactor (-1)^(J-M) */
  phase *= parity(J-M);

  switch (j3) {
  case 0:
  
    w3j = 1/sqrt(2.0*J+1);
    break;
  
  case 1:
  
    if (jd==0) {
      if (m3==0) 
        w3j = M/sqrt(J*(J+1)*(2.0*J+1));
      else
        w3j = sqrt(2.0*y*(z+1)/((x+3)*(x+2)*(x+1)));
    }
    else {
      tmp = (x+1)*(x+2)*(x+3);
      if (m3==0)
        w3j = -sqrt(2*(y+1)*(z+1)/tmp);
      else
        w3j = -sqrt(y*(y+1)/tmp);
    }
    break;
  
  case 2:
  
    tmp = x*(x+1)*(x+2)*(x+3)*(x+4);
    switch (m3) {
    case 0:
      switch (jd) {
      case 0:
        w3j = 2*(3*M*M-J*(J+1))/sqrt(tmp);
        break;
      case 1:
        w3j = -2*M*sqrt(6*(z+1)*(y+1)/tmp); break;
      default:
        w3j = sqrt(6*(z+2)*(z+1)*(y+2)*(y+1)/tmp); break;
      }
      break;
    case 1:
      switch (jd) {
      case 0:
        w3j = (2*M+1)*sqrt(6*(z+1)*y/tmp); break;
      case 1:
        w3j = -(2*J+4*M+4)*sqrt(y*(y+1)/tmp); break;
      default:
        w3j = 2*sqrt((z+2)*y*(y+1)*(y+2)/tmp); break;
      }
      break;
    case 2:
      switch (jd) {
      case 0:
        w3j = sqrt(6*(y-1)*y*(z+1)*(z+2)/tmp); break;
      case 1:
        w3j = -2*sqrt((y-1)*y*(y+1)*(z+2)/tmp); break;
      default:
        w3j = sqrt((y-1)*y*(y+1)*(y+2)/tmp); break;
      }
      break;
    }
    break;
  }
}
else {
  /* General algorithm */

  double delta_ln = facln(j1+j2-j3) + facln(j1-j2+j3) + facln(-j1+j2+j3) - facln(j1+j2+j3+1);
  double fact_ln = facln(j1+m1) + facln(j1-m1) + facln(j2+m2) + facln(j2-m2) + facln(j3+m3) + facln(j3-m3);

  int t1 = j2 - m1 - j3;
  int t2 = j1 + m2 - j3;
  int t3 = j1 + j2 - j3;
  int t4 = j1 - m1;
  int t5 = j2 + m2;
  int tmin, tmax, t;
  double Sum, denom_ln;
  
  tmin = (t1>t2) ? t1 : t2; tmin = (tmin>0) ? tmin : 0;
  tmax = (t3<t4) ? t3 : t4; tmax = (tmax<t5) ? tmax : t5;

  /*t = max([t1,t2,0]) : min([t3,t4,t5]); */
  
  Sum = 0;
  for (t = tmin;t<=tmax;t++) {
    denom_ln = facln(t) + facln(t-t1) + facln(t-t2) + facln(t3-t) + facln(t4-t) + facln(t5-t);
    Sum += parity(t) * exp(delta_ln/2 + fact_ln/2 - denom_ln);
  }
  
  w3j = parity(j1-j2-m3) * Sum;
  /*value = (-1)^(j1-j2-m3) * sum((-1).^t.*exp(delta_ln/2 + fact_ln/2 - denom_ln)); */
  
}

return phase*w3j;

}
